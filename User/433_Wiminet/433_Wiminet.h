#ifndef _433_WIMINET_H_
#define _433_WIMINET_H_
#include "stm32f10x.h"
#include "stdlib.h"

#define  random(x)  (rand()%x);

//------------------------------------------------------------------------------
// DESCRIPTION: 请求命令字的起始序号
// -----------------------------------------------------------------------------
#define CMDMSG_BASE                       0X00
// -----------------------------------------------------------------------------
// DESCRIPTION: 其他类设备:请求命令字的起始序号
// -----------------------------------------------------------------------------
#define MACHINE_CMDBASE                   ( CMDMSG_BASE + 0X70 ) 
// -----------------------------------------------------------------------------
// DESCRIPTION: 其他类设备的请求命令字:读取根节点MAC地址
// -----------------------------------------------------------------------------
#define CMDMSG_GET_COORDINATOR_ID         ( MACHINE_CMDBASE + 0X06 )


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#if defined ( __CC_ARM ) 

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#pragma push

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#pragma pack( 1 )

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#endif



//结构体声明
// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _NodeMsg
{
   // --------------------------------------------------------------------------
   // DESCRIPTION: 同步字符，固定0xAA
   // --------------------------------------------------------------------------
   unsigned char                                               m_iHeader;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 报文操作命令，固定为0x00
   // --------------------------------------------------------------------------
   unsigned char                                               m_iOpCode;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 可选操作参数-A，传感节点地址高字节
   // --------------------------------------------------------------------------
   unsigned char                                               m_iValueA;
      
   // --------------------------------------------------------------------------
   // DESCRIPTION: 可选操作参数-B，传感节点地址低字节
   // --------------------------------------------------------------------------
   unsigned char                                               m_iValueB;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 可选操作参数-C，数据传输标志，默认为0x03
   // --------------------------------------------------------------------------
   unsigned char                                               m_iValueC;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 可选操作参数-D，，固定为0x00
   // --------------------------------------------------------------------------
   unsigned char                                               m_iValueD;
      
   // --------------------------------------------------------------------------
   // DESCRIPTION: 报文长度，指报文实体的总长度
   // --------------------------------------------------------------------------
   unsigned char                                               m_iAmount;  
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 报文的CRC校验码，
   // --------------------------------------------------------------------------
   unsigned short                                              m_iCRCode;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 报文实体
   // --------------------------------------------------------------------------
   unsigned char                                               m_pBuffer[255];  
   
} NodeMsg;


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#if defined ( __CC_ARM ) 

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#pragma pop

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#endif



///////////////////////////////////////////////////////////////////////////////
//函数声明

unsigned short GetCoordinatorID (void);
//void  SendMessage(char* Psend, unsigned short iSize);
u16  SendMessage(u8* Psend, unsigned short iSize, u8* pDeviceID, u16 Address_Node);
unsigned char  ReceiveMessageVerify(char*  pRecevBuff);
// -----------------------------------------------------------------------------
// DESCRIPTION: 是否是一个有效的报文，该报文必须有同步字符并且CRC验算正确
// -----------------------------------------------------------------------------
unsigned char IsValidNodeMsg( NodeMsg * pMsg );
// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
unsigned short CRC16( unsigned char * pMsg, unsigned short iSize );
// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void UpdateNodeMsgCRC( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
//void WriteNodeMsg( unsigned char hFile, NodeMsg * pMsg );
/////////////////////////////设置433模块参数/////////////////////////////////////
void SetNodeSerialPort(u8 BaudRate, u8 VerifyType);     //设置433模块串口波特率和校验类型
void SetNodeCentralFrequency(u16 sFreq);                //设置433模块载波中心频率
void SetNodeFrequencyExpandFactor(u8 sExpFactor);       //设置433模块扩频因子
void SetNodeFrequencyExpandBandwidth(u8 sBandwidth);    //设置433模块扩频带宽
void SetNodeWorkMode(u8 sWorkMode);                     //设置433模块工作模式
void SetNodeID (u16 sNodeID);                           //设置433模块ID
void SetNodeNetworkID (u8 sNetID);                      //设置433模块网络ID
void SetNodeSendPowerGrade (u8 PowerGrade);             //设置433模块发射功率等级
void SetNodeBreathPeriod (u8 sBreath);                  //设置433模块呼吸周期
void SetNodeBreathTime (u8 sWakeTime);                  //设置433模块呼吸时间
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////读取433模块参数/////////////////////////////////////
u8  GetNodeReceiveSignalEnergy (void);                  //获取433模块上一帧数据接收信号强度
u16 GetNodeSerialPortConfig (void);                     //获取433模块串口配置参数
u16 GetNodeCentralFrequency (void);                     //获取433模块载波频率参数
u8  GetNodeFrequencyExpandFactor (void);                //获取433模块扩频因子参数
u8  GetNodeFrequencyExpandBandwidth (void);             //获取433模块扩频带宽参数
u8  GetNodeWorkMode (void);                             //获取433模块工作模式参数
u16 GetNodeID (void);                                   //获取433模块节点ID
u8  GetNetworkID (void);                                //获取433模块网络ID
u8  GetNodeSendPowerGrade (void);                       //获取433模块发射功率
u8  GetNodeBreathPeriod (void);                         //获取433模块呼吸周期
u8  GetNodeBreathTime (void);                           //获取433模块呼吸时间
/////////////////////////////////////////////////////////////////////////////////
unsigned short GetNodeID (void);
void SetNodeID (unsigned short sNodeID);

#endif

